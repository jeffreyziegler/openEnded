# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("ggplot2"),  pkgTest)
# set working directory
setwd("~/Dropbox/Emory/teaching/QTM200/slides/8_13")
##############
# lecture code
##############
# import data
crime <- read.table("crime.txt", header = T)
# full regression
full_reg <- lm(CrimeRate ~., data=crime)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("ggplot2", "car"),  pkgTest)
# set working directory
setwd("~/Dropbox/Emory/teaching/QTM200/slides/8_13")
##############
# lecture code
##############
# import data
crime <- read.table("crime.txt", header = T)
# full regression
full_reg <- lm(CrimeRate ~., data=crime)
# check multi-collinearity
vif(full_reg)
library(xtable)
xtable(# check multi-collinearity
vif(full_reg))
# perform stepwise model selection
step(full_reg)
# perform stepwise model selection
test <- step(full_reg)
test$xlevels
test$anova$AIC
summary(step(full_reg))
library(texreg)
texreg(list(summary(step(full_reg))
))
texreg(list(summary(step(full_reg))
))
summary(step(full_reg))
dim(crime)[1]
# perform stepwise model selection w/ BIC
step(full_reg, k=log(dim(crime)[1]))
summary(step(full_reg, k=log(dim(crime)[1]))
)
# create reduced model
reduced_reg <- lm(CrimeRate ~ 1, data=crime)
# add variables now from reduced
step(reduced_reg, scope = list(lower=reduced_reg, upper=full_reg), direction="forward")
summary(step(reduced_reg, scope = list(lower=reduced_reg, upper=full_reg), direction="forward")
)
# add variables now from reduced
step(reduced_reg, scope = list(lower=reduced_reg, upper=full_reg), direction="forward")
# add variables now from reduced
step(reduced_reg, scope = list(lower=reduced_reg, upper=full_reg), direction="forward")
summary(step(reduced_reg, scope = list(lower=reduced_reg, upper=full_reg), direction="forward")
)
#####################
# load libraries
# set wd
# clear global .envir
#####################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
# here is where you load any necessary packages
# ex: stringr
# lapply(c("stringr"),  pkgTest)
lapply(c("ggplot2", "car", "leaps"),  pkgTest)
# set working directory
setwd("~/Dropbox/Emory/teaching/QTM200/slides/8_13")
##############
# lecture code
##############
# import data
crime <- read.table("crime.txt", header = T)
# full regression
full_reg <- lm(CrimeRate ~., data=crime)
# check multi-collinearity
vif(full_reg)
# perform stepwise model selection
step(full_reg)
summary(step(full_reg))
# perform stepwise model selection w/ BIC
step(full_reg, k=log(dim(crime)[1]))
# create reduced model
reduced_reg <- lm(CrimeRate ~ 1, data=crime)
# add variables now from reduced
step(reduced_reg, scope = list(lower=reduced_reg, upper=full_reg), direction="forward")
# find "best" model with leaps
regsubsets(CrimeRate ~., data=crime, nbest=1, nvmax=13)
# find "best" model with leaps
test <- regsubsets(CrimeRate ~., data=crime, nbest=1, nvmax=13)
test
summary(test)
# find "best" model with leaps
subsets(regsubsets(CrimeRate ~., data=crime, nbest=4, nvmax=8),
min.size = 3, max.size = 6, legend = F)
# find "best" model with leaps
pdf("../../graphics/subset_stepwise.pdf")
subsets(regsubsets(CrimeRate ~., data=crime, nbest=4, nvmax=8),
min.size = 3, max.size = 6, legend = F)
dev.off()
# find the 4 best models
subsets(regsubsets(CrimeRate ~., data=crime, nbest=4, nvmax=13), legend = F)
# find the 4 best models
pdf("../../graphics/subset_stepwise4.pdf")
subsets(regsubsets(CrimeRate ~., data=crime, nbest=4, nvmax=13), legend = F)
dev.off()
BIC(full_reg)
AIC(full_reg, k=log(47))
# Access model fit stats directly
model1 <- lm(CrimeRate ~ Ex60 + Ex59 + LF + Male + Pop, data=crime)
AIC(model1)
# get AIC
AIC(model1); AIC(model2)
# Access model fit stats directly
model1 <- lm(CrimeRate ~ Ex60 + Ex59 + LF + Male + Pop, data=crime)
model2 <- lm(CrimeRate ~ Age + S + Ex60 + Ex59 + U1 + Pov1, data=crime)
# get AIC
AIC(model1); AIC(model2)
# get BIC
AIC(model1, k=log(47)); BIC(model1)
# Access model fit stats directly
model1 <- lm(CrimeRate ~ Ex60 + Ex59 + LF + Male + Pop, data=crime)
model2 <- lm(CrimeRate ~ Age + S + Ex60 + Ex59 + U1 + Pov1, data=crime)
model2 <- lm(CrimeRate ~ Age + S + Ex60 + Ex59 + U1 + Pov, data=crime)
# get AIC
AIC(model1); AIC(model2)
# get BIC
AIC(model1, k=log(47)); BIC(model1)
#######################
# set working directory
# load data
# and load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# Jeff wd
setwd('~/Dropbox/Emory/projects/textAttentionCheck/package')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c(), pkgTest)
package.skeleton(name = "mynewpackage")
#######################
# set working directory
# load data
# and load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# Jeff wd
setwd('~/Dropbox/Emory/projects/textAttentionCheck')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c(), pkgTest)
##################
### create package
##################
package.skeleton(name = "package")
# create package skeleton
# i.e. new folder
package.skeleton(name = "package_documentation")
?stringdist
library(stringdist)
?stringdist
######################
# set working directory
# load data
# and load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# Jeff wd
setwd('~/Dropbox/Emory/projects/textAttentionCheck/')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("readstata13", "ggplot2", "plyr", "stringr", "stringdist", "text2vec", "tcR"), pkgTest)
#############
### Load data
#############
# survey data
kaneData <- read.dta13("data/kaneReplication/Trump_News_Experiment.dta", nonint.factors=T)
kaneData$Conditions <- revalue(as.character(kaneData$NewsStoryConditions),
c("Alienate"="Disunited w/ Inparty Coalition", "Appease"="United w/ Inparty Coalition"))
kaneData$codeCorrect <- revalue(as.character(kaneData$CodeFMC),
c("4"="Incorrect", "1"="Correct",  "2"="Correct", "3"="Correct"))
kaneData$correct <- as.numeric(revalue(as.character(kaneData$codeCorrect),
c("Incorrect"=0, "Correct"=1)))
kaneData$ideologyFactor <- revalue(as.character(kaneData$ideology),
c("1"="Strong Democrat", "2"="Democrat",  "3"="Independent, but Leaning Democrat", "4"="Independent",
"5"="Independent, but Leaning Republican", "6"="Republican",  "7"="Strong Republican"))
kaneData$ideologyFactor3 <- revalue(kaneData$ideologyFactor, c("Strong Democrat"="Democrat", "Independent, but Leaning Democrat"="Democrat",
"Independent, but Leaning Republican"="Republican", "Strong Republican"="Republican"))
kaneData$pid3 <- revalue(as.character(kaneData$pid7), c("1"="Liberal", "2"="Liberal", "3"="Liberal",
"4"="Moderate/Middle of the Road", "5"="Conservative",
"6"="Conservative", "7"="Conservative"))
################
### Load prompts
################
# load actual textual prompts that respondents read
controlPrompt <- c("Basic biographical information about President Trump")
unityPrompt <- c("Trump recently pleasing many of his conservative supporters")
disunityPrompt <- c("Trump recently upsetting many of his conservative supporters")
# match respondents assigned topic w/ the text that they vieweed
# in Spanish
kaneData$textViewed <- ifelse(kaneData$NewsStoryConditions=="Control", controlPrompt,
ifelse(kaneData$NewsStoryConditions=="Appease", unityPrompt,
ifelse(kaneData$NewsStoryConditions=="Alienate", disunityPrompt, NA)))
##############################
### create distance measures
similarity_measures <- function(dataframe, prompt, response, measure_type="jaccard", ngrams){
# possible values for measure_type = c("osa", "lv", "dl", "hamming", "lcs",
# "qgram", "cosine", "jaccard", "jw", "soundex")
stringdist(enc2utf8(dataframe[, prompt]), enc2utf8(dataframe[, response]), useBytes=TRUE,  method=measure_type, q=ngrams)
}
similarity_measures(dataframe=kaneData, prompt="newsFMC", response="textViewed", measure_type="jaccard", ngrams=3)
head(similarity_measures(dataframe=kaneData, prompt="newsFMC", response="textViewed", measure_type="jaccard", ngrams=3)
)
stringdist(enc2utf8(kaneData$newsFMC), kaneData$textViewed, useBytes=TRUE,  method='jaccard', q=3)
head(stringdist(enc2utf8(kaneData$newsFMC), kaneData$textViewed, useBytes=TRUE,  method='jaccard', q=3))
head(similarity_measures(dataframe=kaneData, prompt="newsFMC", response="textViewed", measure_type="jaccard", ngrams=3)
)
similarity_measures(dataframe=kaneData, prompt="newsFMC", response="textViewed", measure_type="cosine", ngrams=3)
head(similarity_measures(dataframe=kaneData, prompt="newsFMC", response="textViewed", measure_type="cosine", ngrams=3)
)
head(stringdist(enc2utf8(kaneData$newsFMC), kaneData$textViewed, useBytes=TRUE,  method='cosine', q=3))
similarity_measures <- function(dataframe, prompt, response, measure_type="jaccard", ngrams){
# possible values for measure_type = c("osa", "lv", "dl", "hamming", "lcs",
# "qgram", "cosine", "jaccard", "jw", "soundex")
1-stringdist(enc2utf8(dataframe[, prompt]), enc2utf8(dataframe[, response]), useBytes=TRUE,  method=measure_type, q=ngrams)
}
head(similarity_measures(dataframe=kaneData, prompt="newsFMC", response="textViewed", measure_type="cosine", ngrams=3)
)
#######################
# set working directory
# load data
# and load libraries
#######################
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
# Jeff wd
setwd('~/Dropbox/Emory/projects/textAttentionCheck/')
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
lapply(c("readstata13", "ggplot2", "plyr", "stringr", "stringdist", "text2vec", "tcR"), pkgTest)
#############
### Load data
#############
rm(list = ls())
ls()
# create package skeleton
# i.e. new folder
# setwd('~/Dropbox/Emory/projects/textAttentionCheck/package')
package.skeleton(name = "package_documentation")
# create package skeleton
# i.e. new folder
setwd('~/Dropbox/Emory/projects/textAttentionCheck/package')
package.skeleton(name = "package_documentation")
# create package skeleton
# i.e. new folder
setwd('~/Dropbox/Emory/projects/textAttentionCheck/package')
package.skeleton(name = "package_documentation")
####################
### detach libraries
####################
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
##################
### load libraries
##################
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
##############################
### create similarity measures
##############################
similarity_measures <- function(dataframe, prompt, response, measure_type="jaccard", ngrams){
# possible values for measure_type = c("osa", "lv", "dl", "hamming", "lcs",
# "qgram", "cosine", "jaccard", "jw", "soundex")
1-stringdist(enc2utf8(dataframe[, prompt]), enc2utf8(dataframe[, response]), useBytes=TRUE,  method=measure_type, q=ngrams)
}
##################
### create package
##################
# create package skeleton
# i.e. new folder
setwd('~/Dropbox/Emory/projects/textAttentionCheck/package')
package.skeleton(name = "package_documentation")
####################
### detach libraries
####################
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
##################
### load libraries
##################
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
##############################
### create similarity measures
##############################
similarity_measures <- function(dataframe, prompt, response, measure_type="jaccard", ngrams){
# possible values for measure_type = c("osa", "lv", "dl", "hamming", "lcs",
# "qgram", "cosine", "jaccard", "jw", "soundex")
1-stringdist(enc2utf8(dataframe[, prompt]), enc2utf8(dataframe[, response]), useBytes=TRUE,  method=measure_type, q=ngrams)
}
##################
### create package
##################
# create package skeleton
# i.e. new folder
setwd('~/Dropbox/Emory/projects/textAttentionCheck/package')
package.skeleton(name = "package_documentation")
library(devtools)
library(roxygen2)
my.Rpackage <- as.package(package_documentation)
rm(list = ls())
####################
### detach libraries
####################
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
##################
### load libraries
##################
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
##############################
### create similarity measures
##############################
similarity_measures <- function(dataframe, prompt, response, measure_type="jaccard", ngrams){
# possible values for measure_type = c("osa", "lv", "dl", "hamming", "lcs",
# "qgram", "cosine", "jaccard", "jw", "soundex")
1-stringdist(enc2utf8(dataframe[, prompt]), enc2utf8(dataframe[, response]), useBytes=TRUE,  method=measure_type, q=ngrams)
}
##################
### create package
##################
# create package skeleton
# i.e. new folder
setwd('~/Dropbox/Emory/projects/textAttentionCheck/package')
package.skeleton(name = "package_documentation")
my.Rpackage <- as.package(package_documentation)
my.Rpackage <- as.package("package_documentation")
load_all(my.Rpackage)
document(my.Rpackage)
load_all(my.Rpackage)
document(my.Rpackage)
load_all(my.Rpackage)
document(my.Rpackage)
rm(list = ls())
####################
### detach libraries
####################
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
##################
### load libraries
##################
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
##############################
### create similarity measures
##############################
similarity_measures <- function(dataframe, prompt, response, measure_type="jaccard", ngrams){
# possible values for measure_type = c("osa", "lv", "dl", "hamming", "lcs",
# "qgram", "cosine", "jaccard", "jw", "soundex")
1-stringdist(enc2utf8(dataframe[, prompt]), enc2utf8(dataframe[, response]), useBytes=TRUE,  method=measure_type, q=ngrams)
}
##################
### create package
##################
# create package skeleton
# i.e. new folder
setwd('~/Dropbox/Emory/projects/textAttentionCheck/package')
package.skeleton(name = "openEnded")
library(devtools)
library(roxygen2)
my.Rpackage <- as.package("openEnded")
load_all(my.Rpackage)
document(my.Rpackage)
